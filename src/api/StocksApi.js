/*
 * Stocks
 * <h3>Authentication</h3>                     You need to authenticate to use this API.                     To authenticate click on the \"Authorize\" button and do one of the following steps.<br />                     1. Send your API key in the headers of the request by typing \"Bearer my-key\" on the Bearer authorization scheme.<br />                     2. Send your API key on the \"ApiKey\" query string parameter. To do this type your API key in the Query String authorization scheme.<br />                     Both methods are equally valid. We offer both options so that you can use the method that is easier to use in your application.<br />                     <br />                     <h3>API limits</h3>                     Your API key may be subject to daily/hourly limits. To know how much requests you have left look at the following headers in the response.<br />                     1. <strong>x-ratelimit-limit</strong> - The total number of requests that you are allowed to make in a given period (hour/day)                       2. <strong>x-ratelimit-remaining</strong> - The number of remaining requests that you can perform in the current period.<br />                     3. <strong>x-ratelimit-reset</strong> - The number of seconds until the current period resets.<br />                     <br />                     <h3>Suggestions</h3>                     You don't need to implement the whole API by hand in your programming language of choice.<br />                     Since this API has an OpenAPI specification you can use                      <a href=\"https://github.com/swagger-api/swagger-codegen\" target=\"_blank\">Swagger Generator</a>                      to automatically generate client stubs for more than 30 programming languages.                     <br />                     <br />                     You don't have an API key? <a href=\"https://www.equibles.com/api/pricing\" target=\"_blank\">Get one for free here.</a>
 *
 * OpenAPI spec version: v1
 * Contact: equibles@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.32
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {OfficersResponse} from '../model/OfficersResponse';
import {ScreenerRequest} from '../model/ScreenerRequest';
import {SplitsResponse} from '../model/SplitsResponse';
import {StockProfileResponse} from '../model/StockProfileResponse';
import {StockProfilesResponse} from '../model/StockProfilesResponse';

/**
* Stocks service.
* @module api/StocksApi
* @version v1
*/
export class StocksApi {

    /**
    * Constructs a new StocksApi. 
    * @alias module:api/StocksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get a list of all the available stocks.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The number of the page to request. (default to <.>)
     * @param {Number} opts.pageSize The number of elements in each page. Max value: 100. (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StockProfilesResponse} and HTTP response
     */
    listWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page'],'pageSize': opts['pageSize']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Query String'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = StockProfilesResponse;

      return this.apiClient.callApi(
        '/stocks/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a list of all the available stocks.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The number of the page to request. (default to <.>)
     * @param {Number} opts.pageSize The number of elements in each page. Max value: 100. (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StockProfilesResponse}
     */
    list(opts) {
      return this.listWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the officers of the company.
     * @param {String} fullTicker The fully qualified ticker of the stock. Example: AAPL.XNAS
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OfficersResponse} and HTTP response
     */
    officersWithHttpInfo(fullTicker) {
      
      let postBody = null;
      // verify the required parameter 'fullTicker' is set
      if (fullTicker === undefined || fullTicker === null) {
        throw new Error("Missing the required parameter 'fullTicker' when calling officers");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'fullTicker': fullTicker
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Query String'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = OfficersResponse;

      return this.apiClient.callApi(
        '/stocks/officers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the officers of the company.
     * @param {<&vendorExtensions.x-jsdoc-type>} fullTicker The fully qualified ticker of the stock. Example: AAPL.XNAS
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OfficersResponse}
     */
    officers(fullTicker) {
      return this.officersWithHttpInfo(fullTicker)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * The profile of this stock.
     * @param {String} fullTicker The fully qualified ticker of the stock. Example: AAPL.XNAS
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StockProfileResponse} and HTTP response
     */
    profileWithHttpInfo(fullTicker) {
      
      let postBody = null;
      // verify the required parameter 'fullTicker' is set
      if (fullTicker === undefined || fullTicker === null) {
        throw new Error("Missing the required parameter 'fullTicker' when calling profile");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'fullTicker': fullTicker
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Query String'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = StockProfileResponse;

      return this.apiClient.callApi(
        '/stocks/profile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * The profile of this stock.
     * @param {<&vendorExtensions.x-jsdoc-type>} fullTicker The fully qualified ticker of the stock. Example: AAPL.XNAS
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StockProfileResponse}
     */
    profile(fullTicker) {
      return this.profileWithHttpInfo(fullTicker)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a list of stocks constraint to several criteria.
     * Get a list of the stocks constraint to several criteria. You only need to fill the fields of ScreenerRequest that you want to use as filters.
     * @param {module:model/ScreenerRequest} body The criteria used to filter the search results. You only need to fill the fields that you want to use on the search.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The number of the page to request. (default to <.>)
     * @param {Number} opts.pageSize The number of elements in each page. Max value: 100. (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StockProfilesResponse} and HTTP response
     */
    screenerWithHttpInfo(body, opts) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling screener");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page'],'pageSize': opts['pageSize']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Query String'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = StockProfilesResponse;

      return this.apiClient.callApi(
        '/stocks/screener', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a list of stocks constraint to several criteria.
     * Get a list of the stocks constraint to several criteria. You only need to fill the fields of ScreenerRequest that you want to use as filters.
     * @param {<&vendorExtensions.x-jsdoc-type>} body The criteria used to filter the search results. You only need to fill the fields that you want to use on the search.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The number of the page to request. (default to <.>)
     * @param {Number} opts.pageSize The number of elements in each page. Max value: 100. (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StockProfilesResponse}
     */
    screener(body, opts) {
      return this.screenerWithHttpInfo(body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search among all the available stocks.
     * @param {String} text The text to search for.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The number of the page to request. (default to <.>)
     * @param {Number} opts.pageSize The number of elements in each page. Max value: 100. (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StockProfilesResponse} and HTTP response
     */
    searchWithHttpInfo(text, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling search");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'text': text,'page': opts['page'],'pageSize': opts['pageSize']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Query String'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = StockProfilesResponse;

      return this.apiClient.callApi(
        '/stocks/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Search among all the available stocks.
     * @param {<&vendorExtensions.x-jsdoc-type>} text The text to search for.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The number of the page to request. (default to <.>)
     * @param {Number} opts.pageSize The number of elements in each page. Max value: 100. (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StockProfilesResponse}
     */
    search(text, opts) {
      return this.searchWithHttpInfo(text, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all the splits for a given stock.
     * @param {String} fullTicker The fully qualified ticker of the stock. Example: AAPL.XNAS
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The number of the page to request. (default to <.>)
     * @param {Number} opts.pageSize The number of elements in each page. Max value: 1000. (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SplitsResponse} and HTTP response
     */
    splitsWithHttpInfo(fullTicker, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fullTicker' is set
      if (fullTicker === undefined || fullTicker === null) {
        throw new Error("Missing the required parameter 'fullTicker' when calling splits");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'fullTicker': fullTicker,'page': opts['page'],'pageSize': opts['pageSize']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Query String'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = SplitsResponse;

      return this.apiClient.callApi(
        '/stocks/splits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all the splits for a given stock.
     * @param {<&vendorExtensions.x-jsdoc-type>} fullTicker The fully qualified ticker of the stock. Example: AAPL.XNAS
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The number of the page to request. (default to <.>)
     * @param {Number} opts.pageSize The number of elements in each page. Max value: 1000. (default to <.>)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SplitsResponse}
     */
    splits(fullTicker, opts) {
      return this.splitsWithHttpInfo(fullTicker, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}