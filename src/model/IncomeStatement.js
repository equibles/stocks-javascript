/*
 * Stocks
 * <h3>Authentication</h3>                     You need to authenticate to use this API.                     To authenticate click on the \"Authorize\" button and do one of the following steps.<br />                     1. Send your API key in the headers of the request by typing \"Bearer my-key\" on the Bearer authorization scheme.<br />                     2. Send your API key on the \"ApiKey\" query string parameter. To do this type your API key in the Query String authorization scheme.<br />                     Both methods are equally valid. We offer both options so that you can use the method that is easier to use in your application.<br />                     <br />                     <h3>API limits</h3>                     Your API key may be subject to daily/hourly limits. To know how much requests you have left look at the following headers in the response.<br />                     1. <strong>x-ratelimit-limit</strong> - The total number of requests that you are allowed to make in a given period (hour/day)                       2. <strong>x-ratelimit-remaining</strong> - The number of remaining requests that you can perform in the current period.<br />                     3. <strong>x-ratelimit-reset</strong> - The number of seconds until the current period resets.<br />                     <br />                     <h3>Suggestions</h3>                     You don't need to implement the whole API by hand in your programming language of choice.<br />                     Since this API has an OpenAPI specification you can use                      <a href=\"https://github.com/swagger-api/swagger-codegen\" target=\"_blank\">Swagger Generator</a>                      to automatically generate client stubs for more than 30 programming languages.                     <br />                     <br />                     You don't have an API key? <a href=\"https://www.equibles.com/api/pricing\" target=\"_blank\">Get one for free here.</a>
 *
 * OpenAPI spec version: v1
 * Contact: equibles@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.32
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The IncomeStatement model module.
 * @module model/IncomeStatement
 * @version v1
 */
export class IncomeStatement {
  /**
   * Constructs a new <code>IncomeStatement</code>.
   * @alias module:model/IncomeStatement
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>IncomeStatement</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IncomeStatement} obj Optional instance to populate.
   * @return {module:model/IncomeStatement} The populated <code>IncomeStatement</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new IncomeStatement();
      if (data.hasOwnProperty('grossProfit'))
        obj.grossProfit = ApiClient.convertToType(data['grossProfit'], 'Number');
      if (data.hasOwnProperty('revenue'))
        obj.revenue = ApiClient.convertToType(data['revenue'], 'Number');
      if (data.hasOwnProperty('costOfRevenue'))
        obj.costOfRevenue = ApiClient.convertToType(data['costOfRevenue'], 'Number');
      if (data.hasOwnProperty('costOfGoodsAndServicesSold'))
        obj.costOfGoodsAndServicesSold = ApiClient.convertToType(data['costOfGoodsAndServicesSold'], 'Number');
      if (data.hasOwnProperty('operatingIncome'))
        obj.operatingIncome = ApiClient.convertToType(data['operatingIncome'], 'Number');
      if (data.hasOwnProperty('sellingGeneralAndAdministrative'))
        obj.sellingGeneralAndAdministrative = ApiClient.convertToType(data['sellingGeneralAndAdministrative'], 'Number');
      if (data.hasOwnProperty('researchAndDevelopment'))
        obj.researchAndDevelopment = ApiClient.convertToType(data['researchAndDevelopment'], 'Number');
      if (data.hasOwnProperty('operatingExpenses'))
        obj.operatingExpenses = ApiClient.convertToType(data['operatingExpenses'], 'Number');
      if (data.hasOwnProperty('investmentIncomeNet'))
        obj.investmentIncomeNet = ApiClient.convertToType(data['investmentIncomeNet'], 'Number');
      if (data.hasOwnProperty('netInterestIncome'))
        obj.netInterestIncome = ApiClient.convertToType(data['netInterestIncome'], 'Number');
      if (data.hasOwnProperty('interestIncome'))
        obj.interestIncome = ApiClient.convertToType(data['interestIncome'], 'Number');
      if (data.hasOwnProperty('interestExpense'))
        obj.interestExpense = ApiClient.convertToType(data['interestExpense'], 'Number');
      if (data.hasOwnProperty('nonInterestIncome'))
        obj.nonInterestIncome = ApiClient.convertToType(data['nonInterestIncome'], 'Number');
      if (data.hasOwnProperty('otherNonOperatingIncome'))
        obj.otherNonOperatingIncome = ApiClient.convertToType(data['otherNonOperatingIncome'], 'Number');
      if (data.hasOwnProperty('depreciation'))
        obj.depreciation = ApiClient.convertToType(data['depreciation'], 'Number');
      if (data.hasOwnProperty('depreciationAndAmortization'))
        obj.depreciationAndAmortization = ApiClient.convertToType(data['depreciationAndAmortization'], 'Number');
      if (data.hasOwnProperty('incomeBeforeTax'))
        obj.incomeBeforeTax = ApiClient.convertToType(data['incomeBeforeTax'], 'Number');
      if (data.hasOwnProperty('incomeTaxExpense'))
        obj.incomeTaxExpense = ApiClient.convertToType(data['incomeTaxExpense'], 'Number');
      if (data.hasOwnProperty('interestAndDebtExpense'))
        obj.interestAndDebtExpense = ApiClient.convertToType(data['interestAndDebtExpense'], 'Number');
      if (data.hasOwnProperty('netIncomeFromContinuingOperations'))
        obj.netIncomeFromContinuingOperations = ApiClient.convertToType(data['netIncomeFromContinuingOperations'], 'Number');
      if (data.hasOwnProperty('comprehensiveIncomeNetOfTax'))
        obj.comprehensiveIncomeNetOfTax = ApiClient.convertToType(data['comprehensiveIncomeNetOfTax'], 'Number');
      if (data.hasOwnProperty('ebit'))
        obj.ebit = ApiClient.convertToType(data['ebit'], 'Number');
      if (data.hasOwnProperty('ebitda'))
        obj.ebitda = ApiClient.convertToType(data['ebitda'], 'Number');
      if (data.hasOwnProperty('netIncome'))
        obj.netIncome = ApiClient.convertToType(data['netIncome'], 'Number');
      if (data.hasOwnProperty('effectOfAccountingCharges'))
        obj.effectOfAccountingCharges = ApiClient.convertToType(data['effectOfAccountingCharges'], 'Number');
      if (data.hasOwnProperty('taxProvision'))
        obj.taxProvision = ApiClient.convertToType(data['taxProvision'], 'Number');
      if (data.hasOwnProperty('sellingAndMarketingExpenses'))
        obj.sellingAndMarketingExpenses = ApiClient.convertToType(data['sellingAndMarketingExpenses'], 'Number');
      if (data.hasOwnProperty('extraordinaryItems'))
        obj.extraordinaryItems = ApiClient.convertToType(data['extraordinaryItems'], 'Number');
    }
    return obj;
  }
}

/**
 * @member {Number} grossProfit
 */
IncomeStatement.prototype.grossProfit = undefined;

/**
 * @member {Number} revenue
 */
IncomeStatement.prototype.revenue = undefined;

/**
 * @member {Number} costOfRevenue
 */
IncomeStatement.prototype.costOfRevenue = undefined;

/**
 * @member {Number} costOfGoodsAndServicesSold
 */
IncomeStatement.prototype.costOfGoodsAndServicesSold = undefined;

/**
 * @member {Number} operatingIncome
 */
IncomeStatement.prototype.operatingIncome = undefined;

/**
 * @member {Number} sellingGeneralAndAdministrative
 */
IncomeStatement.prototype.sellingGeneralAndAdministrative = undefined;

/**
 * @member {Number} researchAndDevelopment
 */
IncomeStatement.prototype.researchAndDevelopment = undefined;

/**
 * @member {Number} operatingExpenses
 */
IncomeStatement.prototype.operatingExpenses = undefined;

/**
 * @member {Number} investmentIncomeNet
 */
IncomeStatement.prototype.investmentIncomeNet = undefined;

/**
 * @member {Number} netInterestIncome
 */
IncomeStatement.prototype.netInterestIncome = undefined;

/**
 * @member {Number} interestIncome
 */
IncomeStatement.prototype.interestIncome = undefined;

/**
 * @member {Number} interestExpense
 */
IncomeStatement.prototype.interestExpense = undefined;

/**
 * @member {Number} nonInterestIncome
 */
IncomeStatement.prototype.nonInterestIncome = undefined;

/**
 * @member {Number} otherNonOperatingIncome
 */
IncomeStatement.prototype.otherNonOperatingIncome = undefined;

/**
 * @member {Number} depreciation
 */
IncomeStatement.prototype.depreciation = undefined;

/**
 * @member {Number} depreciationAndAmortization
 */
IncomeStatement.prototype.depreciationAndAmortization = undefined;

/**
 * @member {Number} incomeBeforeTax
 */
IncomeStatement.prototype.incomeBeforeTax = undefined;

/**
 * @member {Number} incomeTaxExpense
 */
IncomeStatement.prototype.incomeTaxExpense = undefined;

/**
 * @member {Number} interestAndDebtExpense
 */
IncomeStatement.prototype.interestAndDebtExpense = undefined;

/**
 * @member {Number} netIncomeFromContinuingOperations
 */
IncomeStatement.prototype.netIncomeFromContinuingOperations = undefined;

/**
 * @member {Number} comprehensiveIncomeNetOfTax
 */
IncomeStatement.prototype.comprehensiveIncomeNetOfTax = undefined;

/**
 * @member {Number} ebit
 */
IncomeStatement.prototype.ebit = undefined;

/**
 * @member {Number} ebitda
 */
IncomeStatement.prototype.ebitda = undefined;

/**
 * @member {Number} netIncome
 */
IncomeStatement.prototype.netIncome = undefined;

/**
 * @member {Number} effectOfAccountingCharges
 */
IncomeStatement.prototype.effectOfAccountingCharges = undefined;

/**
 * @member {Number} taxProvision
 */
IncomeStatement.prototype.taxProvision = undefined;

/**
 * @member {Number} sellingAndMarketingExpenses
 */
IncomeStatement.prototype.sellingAndMarketingExpenses = undefined;

/**
 * @member {Number} extraordinaryItems
 */
IncomeStatement.prototype.extraordinaryItems = undefined;

