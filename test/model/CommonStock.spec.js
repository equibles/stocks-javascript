/**
 * Stocks
 * <h3>Authentication</h3>                     You need to authenticate to use this API.                     To authenticate click on the \"Authorize\" button and do one of the following steps.<br />                     1. Send your API key in the headers of the request by typing \"Bearer my-key\" on the Bearer authorization scheme.<br />                     2. Send your API key on the \"ApiKey\" query string parameter. To do this type your API key in the Query String authorization scheme.<br />                     Both methods are equally valid. We offer both options so that you can use the method that is easier to use in your application.<br />                     <br />                     <h3>API limits</h3>                     Your API key may be subject to daily/hourly limits. To know how much requests you have left look at the following headers in the response.<br />                     1. <strong>x-ratelimit-limit</strong> - The total number of requests that you are allowed to make in a given period (hour/day)                       2. <strong>x-ratelimit-remaining</strong> - The number of remaining requests that you can perform in the current period.<br />                     3. <strong>x-ratelimit-reset</strong> - The number of seconds until the current period resets.<br />                     <br />                     <h3>Suggestions</h3>                     You don't need to implement the whole API by hand in your programming language of choice.<br />                     Since this API has an OpenAPI specification you can use                      <a href=\"https://github.com/swagger-api/swagger-codegen\" target=\"_blank\">Swagger Generator</a>                      to automatically generate client stubs for more than 30 programming languages.                     <br />                     <br />                     You don't have an API key? <a href=\"https://www.equibles.com/api/pricing\" target=\"_blank\">Get one for free here.</a>
 *
 * OpenAPI spec version: v1
 * Contact: equibles@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EquiblesStocks);
  }
}(this, function(expect, EquiblesStocks) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new EquiblesStocks.CommonStock();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CommonStock', function() {
    it('should create an instance of CommonStock', function() {
      // uncomment below and update the code to test CommonStock
      //var instane = new EquiblesStocks.CommonStock();
      //expect(instance).to.be.a(EquiblesStocks.CommonStock);
    });

    it('should have the property logo (base name: "logo")', function() {
      // uncomment below and update the code to test the property logo
      //var instane = new EquiblesStocks.CommonStock();
      //expect(instance).to.be();
    });

    it('should have the property address (base name: "address")', function() {
      // uncomment below and update the code to test the property address
      //var instane = new EquiblesStocks.CommonStock();
      //expect(instance).to.be();
    });

    it('should have the property cik (base name: "cik")', function() {
      // uncomment below and update the code to test the property cik
      //var instane = new EquiblesStocks.CommonStock();
      //expect(instance).to.be();
    });

    it('should have the property locale (base name: "locale")', function() {
      // uncomment below and update the code to test the property locale
      //var instane = new EquiblesStocks.CommonStock();
      //expect(instance).to.be();
    });

    it('should have the property marketCap (base name: "marketCap")', function() {
      // uncomment below and update the code to test the property marketCap
      //var instane = new EquiblesStocks.CommonStock();
      //expect(instance).to.be();
    });

    it('should have the property sharesOutstandingLast (base name: "sharesOutstandingLast")', function() {
      // uncomment below and update the code to test the property sharesOutstandingLast
      //var instane = new EquiblesStocks.CommonStock();
      //expect(instance).to.be();
    });

    it('should have the property phoneNumber (base name: "phoneNumber")', function() {
      // uncomment below and update the code to test the property phoneNumber
      //var instane = new EquiblesStocks.CommonStock();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instane = new EquiblesStocks.CommonStock();
      //expect(instance).to.be();
    });

    it('should have the property employees (base name: "employees")', function() {
      // uncomment below and update the code to test the property employees
      //var instane = new EquiblesStocks.CommonStock();
      //expect(instance).to.be();
    });

    it('should have the property delisted (base name: "delisted")', function() {
      // uncomment below and update the code to test the property delisted
      //var instane = new EquiblesStocks.CommonStock();
      //expect(instance).to.be();
    });

    it('should have the property listDate (base name: "listDate")', function() {
      // uncomment below and update the code to test the property listDate
      //var instane = new EquiblesStocks.CommonStock();
      //expect(instance).to.be();
    });

    it('should have the property website (base name: "website")', function() {
      // uncomment below and update the code to test the property website
      //var instane = new EquiblesStocks.CommonStock();
      //expect(instance).to.be();
    });

    it('should have the property industry (base name: "industry")', function() {
      // uncomment below and update the code to test the property industry
      //var instane = new EquiblesStocks.CommonStock();
      //expect(instance).to.be();
    });

    it('should have the property officers (base name: "officers")', function() {
      // uncomment below and update the code to test the property officers
      //var instane = new EquiblesStocks.CommonStock();
      //expect(instance).to.be();
    });

    it('should have the property ticker (base name: "ticker")', function() {
      // uncomment below and update the code to test the property ticker
      //var instane = new EquiblesStocks.CommonStock();
      //expect(instance).to.be();
    });

    it('should have the property fullTicker (base name: "fullTicker")', function() {
      // uncomment below and update the code to test the property fullTicker
      //var instane = new EquiblesStocks.CommonStock();
      //expect(instance).to.be();
    });

    it('should have the property assetType (base name: "assetType")', function() {
      // uncomment below and update the code to test the property assetType
      //var instane = new EquiblesStocks.CommonStock();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new EquiblesStocks.CommonStock();
      //expect(instance).to.be();
    });

    it('should have the property exchange (base name: "exchange")', function() {
      // uncomment below and update the code to test the property exchange
      //var instane = new EquiblesStocks.CommonStock();
      //expect(instance).to.be();
    });

    it('should have the property lastPrice (base name: "lastPrice")', function() {
      // uncomment below and update the code to test the property lastPrice
      //var instane = new EquiblesStocks.CommonStock();
      //expect(instance).to.be();
    });

  });

}));
