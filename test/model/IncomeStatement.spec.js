/**
 * Stocks
 * <h3>Authentication</h3>                     You need to authenticate to use this API.                     To authenticate click on the \"Authorize\" button and do one of the following steps.<br />                     1. Send your API key in the headers of the request by typing \"Bearer my-key\" on the Bearer authorization scheme.<br />                     2. Send your API key on the \"ApiKey\" query string parameter. To do this type your API key in the Query String authorization scheme.<br />                     Both methods are equally valid. We offer both options so that you can use the method that is easier to use in your application.<br />                     <br />                     <h3>API limits</h3>                     Your API key may be subject to daily/hourly limits. To know how much requests you have left look at the following headers in the response.<br />                     1. <strong>x-ratelimit-limit</strong> - The total number of requests that you are allowed to make in a given period (hour/day)                       2. <strong>x-ratelimit-remaining</strong> - The number of remaining requests that you can perform in the current period.<br />                     3. <strong>x-ratelimit-reset</strong> - The number of seconds until the current period resets.<br />                     <br />                     <h3>Suggestions</h3>                     You don't need to implement the whole API by hand in your programming language of choice.<br />                     Since this API has an OpenAPI specification you can use                      <a href=\"https://github.com/swagger-api/swagger-codegen\" target=\"_blank\">Swagger Generator</a>                      to automatically generate client stubs for more than 30 programming languages.                     <br />                     <br />                     You don't have an API key? <a href=\"https://www.equibles.com/api/pricing\" target=\"_blank\">Get one for free here.</a>
 *
 * OpenAPI spec version: v1
 * Contact: equibles@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EquiblesStocks);
  }
}(this, function(expect, EquiblesStocks) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new EquiblesStocks.IncomeStatement();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('IncomeStatement', function() {
    it('should create an instance of IncomeStatement', function() {
      // uncomment below and update the code to test IncomeStatement
      //var instane = new EquiblesStocks.IncomeStatement();
      //expect(instance).to.be.a(EquiblesStocks.IncomeStatement);
    });

    it('should have the property grossProfit (base name: "grossProfit")', function() {
      // uncomment below and update the code to test the property grossProfit
      //var instane = new EquiblesStocks.IncomeStatement();
      //expect(instance).to.be();
    });

    it('should have the property revenue (base name: "revenue")', function() {
      // uncomment below and update the code to test the property revenue
      //var instane = new EquiblesStocks.IncomeStatement();
      //expect(instance).to.be();
    });

    it('should have the property costOfRevenue (base name: "costOfRevenue")', function() {
      // uncomment below and update the code to test the property costOfRevenue
      //var instane = new EquiblesStocks.IncomeStatement();
      //expect(instance).to.be();
    });

    it('should have the property costOfGoodsAndServicesSold (base name: "costOfGoodsAndServicesSold")', function() {
      // uncomment below and update the code to test the property costOfGoodsAndServicesSold
      //var instane = new EquiblesStocks.IncomeStatement();
      //expect(instance).to.be();
    });

    it('should have the property operatingIncome (base name: "operatingIncome")', function() {
      // uncomment below and update the code to test the property operatingIncome
      //var instane = new EquiblesStocks.IncomeStatement();
      //expect(instance).to.be();
    });

    it('should have the property sellingGeneralAndAdministrative (base name: "sellingGeneralAndAdministrative")', function() {
      // uncomment below and update the code to test the property sellingGeneralAndAdministrative
      //var instane = new EquiblesStocks.IncomeStatement();
      //expect(instance).to.be();
    });

    it('should have the property researchAndDevelopment (base name: "researchAndDevelopment")', function() {
      // uncomment below and update the code to test the property researchAndDevelopment
      //var instane = new EquiblesStocks.IncomeStatement();
      //expect(instance).to.be();
    });

    it('should have the property operatingExpenses (base name: "operatingExpenses")', function() {
      // uncomment below and update the code to test the property operatingExpenses
      //var instane = new EquiblesStocks.IncomeStatement();
      //expect(instance).to.be();
    });

    it('should have the property investmentIncomeNet (base name: "investmentIncomeNet")', function() {
      // uncomment below and update the code to test the property investmentIncomeNet
      //var instane = new EquiblesStocks.IncomeStatement();
      //expect(instance).to.be();
    });

    it('should have the property netInterestIncome (base name: "netInterestIncome")', function() {
      // uncomment below and update the code to test the property netInterestIncome
      //var instane = new EquiblesStocks.IncomeStatement();
      //expect(instance).to.be();
    });

    it('should have the property interestIncome (base name: "interestIncome")', function() {
      // uncomment below and update the code to test the property interestIncome
      //var instane = new EquiblesStocks.IncomeStatement();
      //expect(instance).to.be();
    });

    it('should have the property interestExpense (base name: "interestExpense")', function() {
      // uncomment below and update the code to test the property interestExpense
      //var instane = new EquiblesStocks.IncomeStatement();
      //expect(instance).to.be();
    });

    it('should have the property nonInterestIncome (base name: "nonInterestIncome")', function() {
      // uncomment below and update the code to test the property nonInterestIncome
      //var instane = new EquiblesStocks.IncomeStatement();
      //expect(instance).to.be();
    });

    it('should have the property otherNonOperatingIncome (base name: "otherNonOperatingIncome")', function() {
      // uncomment below and update the code to test the property otherNonOperatingIncome
      //var instane = new EquiblesStocks.IncomeStatement();
      //expect(instance).to.be();
    });

    it('should have the property depreciation (base name: "depreciation")', function() {
      // uncomment below and update the code to test the property depreciation
      //var instane = new EquiblesStocks.IncomeStatement();
      //expect(instance).to.be();
    });

    it('should have the property depreciationAndAmortization (base name: "depreciationAndAmortization")', function() {
      // uncomment below and update the code to test the property depreciationAndAmortization
      //var instane = new EquiblesStocks.IncomeStatement();
      //expect(instance).to.be();
    });

    it('should have the property incomeBeforeTax (base name: "incomeBeforeTax")', function() {
      // uncomment below and update the code to test the property incomeBeforeTax
      //var instane = new EquiblesStocks.IncomeStatement();
      //expect(instance).to.be();
    });

    it('should have the property incomeTaxExpense (base name: "incomeTaxExpense")', function() {
      // uncomment below and update the code to test the property incomeTaxExpense
      //var instane = new EquiblesStocks.IncomeStatement();
      //expect(instance).to.be();
    });

    it('should have the property interestAndDebtExpense (base name: "interestAndDebtExpense")', function() {
      // uncomment below and update the code to test the property interestAndDebtExpense
      //var instane = new EquiblesStocks.IncomeStatement();
      //expect(instance).to.be();
    });

    it('should have the property netIncomeFromContinuingOperations (base name: "netIncomeFromContinuingOperations")', function() {
      // uncomment below and update the code to test the property netIncomeFromContinuingOperations
      //var instane = new EquiblesStocks.IncomeStatement();
      //expect(instance).to.be();
    });

    it('should have the property comprehensiveIncomeNetOfTax (base name: "comprehensiveIncomeNetOfTax")', function() {
      // uncomment below and update the code to test the property comprehensiveIncomeNetOfTax
      //var instane = new EquiblesStocks.IncomeStatement();
      //expect(instance).to.be();
    });

    it('should have the property ebit (base name: "ebit")', function() {
      // uncomment below and update the code to test the property ebit
      //var instane = new EquiblesStocks.IncomeStatement();
      //expect(instance).to.be();
    });

    it('should have the property ebitda (base name: "ebitda")', function() {
      // uncomment below and update the code to test the property ebitda
      //var instane = new EquiblesStocks.IncomeStatement();
      //expect(instance).to.be();
    });

    it('should have the property netIncome (base name: "netIncome")', function() {
      // uncomment below and update the code to test the property netIncome
      //var instane = new EquiblesStocks.IncomeStatement();
      //expect(instance).to.be();
    });

    it('should have the property effectOfAccountingCharges (base name: "effectOfAccountingCharges")', function() {
      // uncomment below and update the code to test the property effectOfAccountingCharges
      //var instane = new EquiblesStocks.IncomeStatement();
      //expect(instance).to.be();
    });

    it('should have the property taxProvision (base name: "taxProvision")', function() {
      // uncomment below and update the code to test the property taxProvision
      //var instane = new EquiblesStocks.IncomeStatement();
      //expect(instance).to.be();
    });

    it('should have the property sellingAndMarketingExpenses (base name: "sellingAndMarketingExpenses")', function() {
      // uncomment below and update the code to test the property sellingAndMarketingExpenses
      //var instane = new EquiblesStocks.IncomeStatement();
      //expect(instance).to.be();
    });

    it('should have the property extraordinaryItems (base name: "extraordinaryItems")', function() {
      // uncomment below and update the code to test the property extraordinaryItems
      //var instane = new EquiblesStocks.IncomeStatement();
      //expect(instance).to.be();
    });

  });

}));
