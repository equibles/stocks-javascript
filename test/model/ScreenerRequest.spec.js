/*
 * Stocks
 * <h3>Authentication</h3>                     You need to authenticate to use this API.                     To authenticate click on the \"Authorize\" button and do one of the following steps.<br />                     1. Send your API key in the headers of the request by typing \"Bearer my-key\" on the Bearer authorization scheme.<br />                     2. Send your API key on the \"ApiKey\" query string parameter. To do this type your API key in the Query String authorization scheme.<br />                     Both methods are equally valid. We offer both options so that you can use the method that is easier to use in your application.<br />                     <br />                     <h3>API limits</h3>                     Your API key may be subject to daily/hourly limits. To know how much requests you have left look at the following headers in the response.<br />                     1. <strong>x-ratelimit-limit</strong> - The total number of requests that you are allowed to make in a given period (hour/day)                       2. <strong>x-ratelimit-remaining</strong> - The number of remaining requests that you can perform in the current period.<br />                     3. <strong>x-ratelimit-reset</strong> - The number of seconds until the current period resets.<br />                     <br />                     <h3>Suggestions</h3>                     You don't need to implement the whole API by hand in your programming language of choice.<br />                     Since this API has an OpenAPI specification you can use                      <a href=\"https://github.com/swagger-api/swagger-codegen\" target=\"_blank\">Swagger Generator</a>                      to automatically generate client stubs for more than 30 programming languages.                     <br />                     <br />                     You don't have an API key? <a href=\"https://api.equibles.com/pricing\" target=\"_blank\">Get one for free here.</a>
 *
 * OpenAPI spec version: v1
 * Contact: equibles@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.32
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EquiblesStocks);
  }
}(this, function(expect, EquiblesStocks) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ScreenerRequest', function() {
      beforeEach(function() {
        instance = new EquiblesStocks.ScreenerRequest();
      });

      it('should create an instance of ScreenerRequest', function() {
        // TODO: update the code to test ScreenerRequest
        expect(instance).to.be.a(EquiblesStocks.ScreenerRequest);
      });

      it('should have the property searchQuery (base name: "searchQuery")', function() {
        // TODO: update the code to test the property searchQuery
        expect(instance).to.have.property('searchQuery');
        // expect(instance.searchQuery).to.be(expectedValueLiteral);
      });

      it('should have the property exchangeIds (base name: "exchangeIds")', function() {
        // TODO: update the code to test the property exchangeIds
        expect(instance).to.have.property('exchangeIds');
        // expect(instance.exchangeIds).to.be(expectedValueLiteral);
      });

      it('should have the property sectorIds (base name: "sectorIds")', function() {
        // TODO: update the code to test the property sectorIds
        expect(instance).to.have.property('sectorIds');
        // expect(instance.sectorIds).to.be(expectedValueLiteral);
      });

      it('should have the property industryIds (base name: "industryIds")', function() {
        // TODO: update the code to test the property industryIds
        expect(instance).to.have.property('industryIds');
        // expect(instance.industryIds).to.be(expectedValueLiteral);
      });

      it('should have the property marketCapMin (base name: "marketCapMin")', function() {
        // TODO: update the code to test the property marketCapMin
        expect(instance).to.have.property('marketCapMin');
        // expect(instance.marketCapMin).to.be(expectedValueLiteral);
      });

      it('should have the property marketCapMax (base name: "marketCapMax")', function() {
        // TODO: update the code to test the property marketCapMax
        expect(instance).to.have.property('marketCapMax');
        // expect(instance.marketCapMax).to.be(expectedValueLiteral);
      });

      it('should have the property betaMin (base name: "betaMin")', function() {
        // TODO: update the code to test the property betaMin
        expect(instance).to.have.property('betaMin');
        // expect(instance.betaMin).to.be(expectedValueLiteral);
      });

      it('should have the property betaMax (base name: "betaMax")', function() {
        // TODO: update the code to test the property betaMax
        expect(instance).to.have.property('betaMax');
        // expect(instance.betaMax).to.be(expectedValueLiteral);
      });

      it('should have the property forwardDividendMin (base name: "forwardDividendMin")', function() {
        // TODO: update the code to test the property forwardDividendMin
        expect(instance).to.have.property('forwardDividendMin');
        // expect(instance.forwardDividendMin).to.be(expectedValueLiteral);
      });

      it('should have the property forwardDividendMax (base name: "forwardDividendMax")', function() {
        // TODO: update the code to test the property forwardDividendMax
        expect(instance).to.have.property('forwardDividendMax');
        // expect(instance.forwardDividendMax).to.be(expectedValueLiteral);
      });

      it('should have the property forwardDividendYieldMin (base name: "forwardDividendYieldMin")', function() {
        // TODO: update the code to test the property forwardDividendYieldMin
        expect(instance).to.have.property('forwardDividendYieldMin');
        // expect(instance.forwardDividendYieldMin).to.be(expectedValueLiteral);
      });

      it('should have the property forwardDividendYieldMax (base name: "forwardDividendYieldMax")', function() {
        // TODO: update the code to test the property forwardDividendYieldMax
        expect(instance).to.have.property('forwardDividendYieldMax');
        // expect(instance.forwardDividendYieldMax).to.be(expectedValueLiteral);
      });

      it('should have the property shortRatioMin (base name: "shortRatioMin")', function() {
        // TODO: update the code to test the property shortRatioMin
        expect(instance).to.have.property('shortRatioMin');
        // expect(instance.shortRatioMin).to.be(expectedValueLiteral);
      });

      it('should have the property shortRatioMax (base name: "shortRatioMax")', function() {
        // TODO: update the code to test the property shortRatioMax
        expect(instance).to.have.property('shortRatioMax');
        // expect(instance.shortRatioMax).to.be(expectedValueLiteral);
      });

      it('should have the property sharesShortPercentageMin (base name: "sharesShortPercentageMin")', function() {
        // TODO: update the code to test the property sharesShortPercentageMin
        expect(instance).to.have.property('sharesShortPercentageMin');
        // expect(instance.sharesShortPercentageMin).to.be(expectedValueLiteral);
      });

      it('should have the property sharesShortPercentageMax (base name: "sharesShortPercentageMax")', function() {
        // TODO: update the code to test the property sharesShortPercentageMax
        expect(instance).to.have.property('sharesShortPercentageMax');
        // expect(instance.sharesShortPercentageMax).to.be(expectedValueLiteral);
      });

      it('should have the property sharesShortPreviousMonthPercentageMin (base name: "sharesShortPreviousMonthPercentageMin")', function() {
        // TODO: update the code to test the property sharesShortPreviousMonthPercentageMin
        expect(instance).to.have.property('sharesShortPreviousMonthPercentageMin');
        // expect(instance.sharesShortPreviousMonthPercentageMin).to.be(expectedValueLiteral);
      });

      it('should have the property sharesShortPreviousMonthPercentageMax (base name: "sharesShortPreviousMonthPercentageMax")', function() {
        // TODO: update the code to test the property sharesShortPreviousMonthPercentageMax
        expect(instance).to.have.property('sharesShortPreviousMonthPercentageMax');
        // expect(instance.sharesShortPreviousMonthPercentageMax).to.be(expectedValueLiteral);
      });

      it('should have the property analystRecommendationMin (base name: "analystRecommendationMin")', function() {
        // TODO: update the code to test the property analystRecommendationMin
        expect(instance).to.have.property('analystRecommendationMin');
        // expect(instance.analystRecommendationMin).to.be(expectedValueLiteral);
      });

      it('should have the property analystRecommendationMax (base name: "analystRecommendationMax")', function() {
        // TODO: update the code to test the property analystRecommendationMax
        expect(instance).to.have.property('analystRecommendationMax');
        // expect(instance.analystRecommendationMax).to.be(expectedValueLiteral);
      });

      it('should have the property performanceOneDayMin (base name: "performanceOneDayMin")', function() {
        // TODO: update the code to test the property performanceOneDayMin
        expect(instance).to.have.property('performanceOneDayMin');
        // expect(instance.performanceOneDayMin).to.be(expectedValueLiteral);
      });

      it('should have the property performanceOneDayMax (base name: "performanceOneDayMax")', function() {
        // TODO: update the code to test the property performanceOneDayMax
        expect(instance).to.have.property('performanceOneDayMax');
        // expect(instance.performanceOneDayMax).to.be(expectedValueLiteral);
      });

      it('should have the property performanceOneWeekMin (base name: "performanceOneWeekMin")', function() {
        // TODO: update the code to test the property performanceOneWeekMin
        expect(instance).to.have.property('performanceOneWeekMin');
        // expect(instance.performanceOneWeekMin).to.be(expectedValueLiteral);
      });

      it('should have the property performanceOneWeekMax (base name: "performanceOneWeekMax")', function() {
        // TODO: update the code to test the property performanceOneWeekMax
        expect(instance).to.have.property('performanceOneWeekMax');
        // expect(instance.performanceOneWeekMax).to.be(expectedValueLiteral);
      });

      it('should have the property performanceTwoWeeksMin (base name: "performanceTwoWeeksMin")', function() {
        // TODO: update the code to test the property performanceTwoWeeksMin
        expect(instance).to.have.property('performanceTwoWeeksMin');
        // expect(instance.performanceTwoWeeksMin).to.be(expectedValueLiteral);
      });

      it('should have the property performanceTwoWeeksMax (base name: "performanceTwoWeeksMax")', function() {
        // TODO: update the code to test the property performanceTwoWeeksMax
        expect(instance).to.have.property('performanceTwoWeeksMax');
        // expect(instance.performanceTwoWeeksMax).to.be(expectedValueLiteral);
      });

      it('should have the property performanceOneMonthMin (base name: "performanceOneMonthMin")', function() {
        // TODO: update the code to test the property performanceOneMonthMin
        expect(instance).to.have.property('performanceOneMonthMin');
        // expect(instance.performanceOneMonthMin).to.be(expectedValueLiteral);
      });

      it('should have the property performanceOneMonthMax (base name: "performanceOneMonthMax")', function() {
        // TODO: update the code to test the property performanceOneMonthMax
        expect(instance).to.have.property('performanceOneMonthMax');
        // expect(instance.performanceOneMonthMax).to.be(expectedValueLiteral);
      });

      it('should have the property performanceThreeMonthsMin (base name: "performanceThreeMonthsMin")', function() {
        // TODO: update the code to test the property performanceThreeMonthsMin
        expect(instance).to.have.property('performanceThreeMonthsMin');
        // expect(instance.performanceThreeMonthsMin).to.be(expectedValueLiteral);
      });

      it('should have the property performanceThreeMonthsMax (base name: "performanceThreeMonthsMax")', function() {
        // TODO: update the code to test the property performanceThreeMonthsMax
        expect(instance).to.have.property('performanceThreeMonthsMax');
        // expect(instance.performanceThreeMonthsMax).to.be(expectedValueLiteral);
      });

      it('should have the property performanceOneYearMin (base name: "performanceOneYearMin")', function() {
        // TODO: update the code to test the property performanceOneYearMin
        expect(instance).to.have.property('performanceOneYearMin');
        // expect(instance.performanceOneYearMin).to.be(expectedValueLiteral);
      });

      it('should have the property performanceOneYearMax (base name: "performanceOneYearMax")', function() {
        // TODO: update the code to test the property performanceOneYearMax
        expect(instance).to.have.property('performanceOneYearMax');
        // expect(instance.performanceOneYearMax).to.be(expectedValueLiteral);
      });

      it('should have the property performanceThreeYearsMin (base name: "performanceThreeYearsMin")', function() {
        // TODO: update the code to test the property performanceThreeYearsMin
        expect(instance).to.have.property('performanceThreeYearsMin');
        // expect(instance.performanceThreeYearsMin).to.be(expectedValueLiteral);
      });

      it('should have the property performanceThreeYearsMax (base name: "performanceThreeYearsMax")', function() {
        // TODO: update the code to test the property performanceThreeYearsMax
        expect(instance).to.have.property('performanceThreeYearsMax');
        // expect(instance.performanceThreeYearsMax).to.be(expectedValueLiteral);
      });

      it('should have the property performanceFiveYearsMin (base name: "performanceFiveYearsMin")', function() {
        // TODO: update the code to test the property performanceFiveYearsMin
        expect(instance).to.have.property('performanceFiveYearsMin');
        // expect(instance.performanceFiveYearsMin).to.be(expectedValueLiteral);
      });

      it('should have the property performanceFiveYearsMax (base name: "performanceFiveYearsMax")', function() {
        // TODO: update the code to test the property performanceFiveYearsMax
        expect(instance).to.have.property('performanceFiveYearsMax');
        // expect(instance.performanceFiveYearsMax).to.be(expectedValueLiteral);
      });

      it('should have the property performanceTenYearsMin (base name: "performanceTenYearsMin")', function() {
        // TODO: update the code to test the property performanceTenYearsMin
        expect(instance).to.have.property('performanceTenYearsMin');
        // expect(instance.performanceTenYearsMin).to.be(expectedValueLiteral);
      });

      it('should have the property performanceTenYearsMax (base name: "performanceTenYearsMax")', function() {
        // TODO: update the code to test the property performanceTenYearsMax
        expect(instance).to.have.property('performanceTenYearsMax');
        // expect(instance.performanceTenYearsMax).to.be(expectedValueLiteral);
      });

      it('should have the property performanceTwentyYearsMin (base name: "performanceTwentyYearsMin")', function() {
        // TODO: update the code to test the property performanceTwentyYearsMin
        expect(instance).to.have.property('performanceTwentyYearsMin');
        // expect(instance.performanceTwentyYearsMin).to.be(expectedValueLiteral);
      });

      it('should have the property performanceTwentyYearsMax (base name: "performanceTwentyYearsMax")', function() {
        // TODO: update the code to test the property performanceTwentyYearsMax
        expect(instance).to.have.property('performanceTwentyYearsMax');
        // expect(instance.performanceTwentyYearsMax).to.be(expectedValueLiteral);
      });

      it('should have the property epsGrowthOneYearMin (base name: "epsGrowthOneYearMin")', function() {
        // TODO: update the code to test the property epsGrowthOneYearMin
        expect(instance).to.have.property('epsGrowthOneYearMin');
        // expect(instance.epsGrowthOneYearMin).to.be(expectedValueLiteral);
      });

      it('should have the property epsGrowthOneYearMax (base name: "epsGrowthOneYearMax")', function() {
        // TODO: update the code to test the property epsGrowthOneYearMax
        expect(instance).to.have.property('epsGrowthOneYearMax');
        // expect(instance.epsGrowthOneYearMax).to.be(expectedValueLiteral);
      });

      it('should have the property epsGrowthTwoYearsMin (base name: "epsGrowthTwoYearsMin")', function() {
        // TODO: update the code to test the property epsGrowthTwoYearsMin
        expect(instance).to.have.property('epsGrowthTwoYearsMin');
        // expect(instance.epsGrowthTwoYearsMin).to.be(expectedValueLiteral);
      });

      it('should have the property epsGrowthTwoYearsMax (base name: "epsGrowthTwoYearsMax")', function() {
        // TODO: update the code to test the property epsGrowthTwoYearsMax
        expect(instance).to.have.property('epsGrowthTwoYearsMax');
        // expect(instance.epsGrowthTwoYearsMax).to.be(expectedValueLiteral);
      });

      it('should have the property epsGrowthThreeYearsMin (base name: "epsGrowthThreeYearsMin")', function() {
        // TODO: update the code to test the property epsGrowthThreeYearsMin
        expect(instance).to.have.property('epsGrowthThreeYearsMin');
        // expect(instance.epsGrowthThreeYearsMin).to.be(expectedValueLiteral);
      });

      it('should have the property epsGrowthThreeYearsMax (base name: "epsGrowthThreeYearsMax")', function() {
        // TODO: update the code to test the property epsGrowthThreeYearsMax
        expect(instance).to.have.property('epsGrowthThreeYearsMax');
        // expect(instance.epsGrowthThreeYearsMax).to.be(expectedValueLiteral);
      });

      it('should have the property epsGrowthFiveYearsMin (base name: "epsGrowthFiveYearsMin")', function() {
        // TODO: update the code to test the property epsGrowthFiveYearsMin
        expect(instance).to.have.property('epsGrowthFiveYearsMin');
        // expect(instance.epsGrowthFiveYearsMin).to.be(expectedValueLiteral);
      });

      it('should have the property epsGrowthFiveYearsMax (base name: "epsGrowthFiveYearsMax")', function() {
        // TODO: update the code to test the property epsGrowthFiveYearsMax
        expect(instance).to.have.property('epsGrowthFiveYearsMax');
        // expect(instance.epsGrowthFiveYearsMax).to.be(expectedValueLiteral);
      });

      it('should have the property epsGrowthTenYearsMin (base name: "epsGrowthTenYearsMin")', function() {
        // TODO: update the code to test the property epsGrowthTenYearsMin
        expect(instance).to.have.property('epsGrowthTenYearsMin');
        // expect(instance.epsGrowthTenYearsMin).to.be(expectedValueLiteral);
      });

      it('should have the property epsGrowthTenYearsMax (base name: "epsGrowthTenYearsMax")', function() {
        // TODO: update the code to test the property epsGrowthTenYearsMax
        expect(instance).to.have.property('epsGrowthTenYearsMax');
        // expect(instance.epsGrowthTenYearsMax).to.be(expectedValueLiteral);
      });

      it('should have the property epsGrowthTwentyYearsMin (base name: "epsGrowthTwentyYearsMin")', function() {
        // TODO: update the code to test the property epsGrowthTwentyYearsMin
        expect(instance).to.have.property('epsGrowthTwentyYearsMin');
        // expect(instance.epsGrowthTwentyYearsMin).to.be(expectedValueLiteral);
      });

      it('should have the property epsGrowthTwentyYearsMax (base name: "epsGrowthTwentyYearsMax")', function() {
        // TODO: update the code to test the property epsGrowthTwentyYearsMax
        expect(instance).to.have.property('epsGrowthTwentyYearsMax');
        // expect(instance.epsGrowthTwentyYearsMax).to.be(expectedValueLiteral);
      });

      it('should have the property peMin (base name: "peMin")', function() {
        // TODO: update the code to test the property peMin
        expect(instance).to.have.property('peMin');
        // expect(instance.peMin).to.be(expectedValueLiteral);
      });

      it('should have the property peMax (base name: "peMax")', function() {
        // TODO: update the code to test the property peMax
        expect(instance).to.have.property('peMax');
        // expect(instance.peMax).to.be(expectedValueLiteral);
      });

      it('should have the property pegMin (base name: "pegMin")', function() {
        // TODO: update the code to test the property pegMin
        expect(instance).to.have.property('pegMin');
        // expect(instance.pegMin).to.be(expectedValueLiteral);
      });

      it('should have the property pegMax (base name: "pegMax")', function() {
        // TODO: update the code to test the property pegMax
        expect(instance).to.have.property('pegMax');
        // expect(instance.pegMax).to.be(expectedValueLiteral);
      });

      it('should have the property priceFcfMin (base name: "priceFcfMin")', function() {
        // TODO: update the code to test the property priceFcfMin
        expect(instance).to.have.property('priceFcfMin');
        // expect(instance.priceFcfMin).to.be(expectedValueLiteral);
      });

      it('should have the property priceFcfMax (base name: "priceFcfMax")', function() {
        // TODO: update the code to test the property priceFcfMax
        expect(instance).to.have.property('priceFcfMax');
        // expect(instance.priceFcfMax).to.be(expectedValueLiteral);
      });

      it('should have the property bookValuePerShareMin (base name: "bookValuePerShareMin")', function() {
        // TODO: update the code to test the property bookValuePerShareMin
        expect(instance).to.have.property('bookValuePerShareMin');
        // expect(instance.bookValuePerShareMin).to.be(expectedValueLiteral);
      });

      it('should have the property bookValuePerShareMax (base name: "bookValuePerShareMax")', function() {
        // TODO: update the code to test the property bookValuePerShareMax
        expect(instance).to.have.property('bookValuePerShareMax');
        // expect(instance.bookValuePerShareMax).to.be(expectedValueLiteral);
      });

      it('should have the property priceBookValuePerShareMin (base name: "priceBookValuePerShareMin")', function() {
        // TODO: update the code to test the property priceBookValuePerShareMin
        expect(instance).to.have.property('priceBookValuePerShareMin');
        // expect(instance.priceBookValuePerShareMin).to.be(expectedValueLiteral);
      });

      it('should have the property priceBookValuePerShareMax (base name: "priceBookValuePerShareMax")', function() {
        // TODO: update the code to test the property priceBookValuePerShareMax
        expect(instance).to.have.property('priceBookValuePerShareMax');
        // expect(instance.priceBookValuePerShareMax).to.be(expectedValueLiteral);
      });

      it('should have the property payoutMin (base name: "payoutMin")', function() {
        // TODO: update the code to test the property payoutMin
        expect(instance).to.have.property('payoutMin');
        // expect(instance.payoutMin).to.be(expectedValueLiteral);
      });

      it('should have the property payoutMax (base name: "payoutMax")', function() {
        // TODO: update the code to test the property payoutMax
        expect(instance).to.have.property('payoutMax');
        // expect(instance.payoutMax).to.be(expectedValueLiteral);
      });

      it('should have the property debtToEquityMin (base name: "debtToEquityMin")', function() {
        // TODO: update the code to test the property debtToEquityMin
        expect(instance).to.have.property('debtToEquityMin');
        // expect(instance.debtToEquityMin).to.be(expectedValueLiteral);
      });

      it('should have the property debtToEquityMax (base name: "debtToEquityMax")', function() {
        // TODO: update the code to test the property debtToEquityMax
        expect(instance).to.have.property('debtToEquityMax');
        // expect(instance.debtToEquityMax).to.be(expectedValueLiteral);
      });

      it('should have the property grossMarginMin (base name: "grossMarginMin")', function() {
        // TODO: update the code to test the property grossMarginMin
        expect(instance).to.have.property('grossMarginMin');
        // expect(instance.grossMarginMin).to.be(expectedValueLiteral);
      });

      it('should have the property grossMarginMax (base name: "grossMarginMax")', function() {
        // TODO: update the code to test the property grossMarginMax
        expect(instance).to.have.property('grossMarginMax');
        // expect(instance.grossMarginMax).to.be(expectedValueLiteral);
      });

      it('should have the property operatingMarginMin (base name: "operatingMarginMin")', function() {
        // TODO: update the code to test the property operatingMarginMin
        expect(instance).to.have.property('operatingMarginMin');
        // expect(instance.operatingMarginMin).to.be(expectedValueLiteral);
      });

      it('should have the property operatingMarginMax (base name: "operatingMarginMax")', function() {
        // TODO: update the code to test the property operatingMarginMax
        expect(instance).to.have.property('operatingMarginMax');
        // expect(instance.operatingMarginMax).to.be(expectedValueLiteral);
      });

      it('should have the property profitMarginMin (base name: "profitMarginMin")', function() {
        // TODO: update the code to test the property profitMarginMin
        expect(instance).to.have.property('profitMarginMin');
        // expect(instance.profitMarginMin).to.be(expectedValueLiteral);
      });

      it('should have the property profitMarginMax (base name: "profitMarginMax")', function() {
        // TODO: update the code to test the property profitMarginMax
        expect(instance).to.have.property('profitMarginMax');
        // expect(instance.profitMarginMax).to.be(expectedValueLiteral);
      });

      it('should have the property priceToSalesMin (base name: "priceToSalesMin")', function() {
        // TODO: update the code to test the property priceToSalesMin
        expect(instance).to.have.property('priceToSalesMin');
        // expect(instance.priceToSalesMin).to.be(expectedValueLiteral);
      });

      it('should have the property priceToSalesMax (base name: "priceToSalesMax")', function() {
        // TODO: update the code to test the property priceToSalesMax
        expect(instance).to.have.property('priceToSalesMax');
        // expect(instance.priceToSalesMax).to.be(expectedValueLiteral);
      });

      it('should have the property buybacksThreeMonthsMin (base name: "buybacksThreeMonthsMin")', function() {
        // TODO: update the code to test the property buybacksThreeMonthsMin
        expect(instance).to.have.property('buybacksThreeMonthsMin');
        // expect(instance.buybacksThreeMonthsMin).to.be(expectedValueLiteral);
      });

      it('should have the property buybacksThreeMonthsMax (base name: "buybacksThreeMonthsMax")', function() {
        // TODO: update the code to test the property buybacksThreeMonthsMax
        expect(instance).to.have.property('buybacksThreeMonthsMax');
        // expect(instance.buybacksThreeMonthsMax).to.be(expectedValueLiteral);
      });

      it('should have the property buybacksSixMonthsMin (base name: "buybacksSixMonthsMin")', function() {
        // TODO: update the code to test the property buybacksSixMonthsMin
        expect(instance).to.have.property('buybacksSixMonthsMin');
        // expect(instance.buybacksSixMonthsMin).to.be(expectedValueLiteral);
      });

      it('should have the property buybacksSixMonthsMax (base name: "buybacksSixMonthsMax")', function() {
        // TODO: update the code to test the property buybacksSixMonthsMax
        expect(instance).to.have.property('buybacksSixMonthsMax');
        // expect(instance.buybacksSixMonthsMax).to.be(expectedValueLiteral);
      });

      it('should have the property buybacksOneYearMin (base name: "buybacksOneYearMin")', function() {
        // TODO: update the code to test the property buybacksOneYearMin
        expect(instance).to.have.property('buybacksOneYearMin');
        // expect(instance.buybacksOneYearMin).to.be(expectedValueLiteral);
      });

      it('should have the property buybacksOneYearMax (base name: "buybacksOneYearMax")', function() {
        // TODO: update the code to test the property buybacksOneYearMax
        expect(instance).to.have.property('buybacksOneYearMax');
        // expect(instance.buybacksOneYearMax).to.be(expectedValueLiteral);
      });

      it('should have the property buybacksTwoYearsMin (base name: "buybacksTwoYearsMin")', function() {
        // TODO: update the code to test the property buybacksTwoYearsMin
        expect(instance).to.have.property('buybacksTwoYearsMin');
        // expect(instance.buybacksTwoYearsMin).to.be(expectedValueLiteral);
      });

      it('should have the property buybacksTwoYearsMax (base name: "buybacksTwoYearsMax")', function() {
        // TODO: update the code to test the property buybacksTwoYearsMax
        expect(instance).to.have.property('buybacksTwoYearsMax');
        // expect(instance.buybacksTwoYearsMax).to.be(expectedValueLiteral);
      });

      it('should have the property buybacksThreeYearsMin (base name: "buybacksThreeYearsMin")', function() {
        // TODO: update the code to test the property buybacksThreeYearsMin
        expect(instance).to.have.property('buybacksThreeYearsMin');
        // expect(instance.buybacksThreeYearsMin).to.be(expectedValueLiteral);
      });

      it('should have the property buybacksThreeYearsMax (base name: "buybacksThreeYearsMax")', function() {
        // TODO: update the code to test the property buybacksThreeYearsMax
        expect(instance).to.have.property('buybacksThreeYearsMax');
        // expect(instance.buybacksThreeYearsMax).to.be(expectedValueLiteral);
      });

      it('should have the property buybacksFiveYearsMin (base name: "buybacksFiveYearsMin")', function() {
        // TODO: update the code to test the property buybacksFiveYearsMin
        expect(instance).to.have.property('buybacksFiveYearsMin');
        // expect(instance.buybacksFiveYearsMin).to.be(expectedValueLiteral);
      });

      it('should have the property buybacksFiveYearsMax (base name: "buybacksFiveYearsMax")', function() {
        // TODO: update the code to test the property buybacksFiveYearsMax
        expect(instance).to.have.property('buybacksFiveYearsMax');
        // expect(instance.buybacksFiveYearsMax).to.be(expectedValueLiteral);
      });

      it('should have the property buybacksTenYearsMin (base name: "buybacksTenYearsMin")', function() {
        // TODO: update the code to test the property buybacksTenYearsMin
        expect(instance).to.have.property('buybacksTenYearsMin');
        // expect(instance.buybacksTenYearsMin).to.be(expectedValueLiteral);
      });

      it('should have the property buybacksTenYearsMax (base name: "buybacksTenYearsMax")', function() {
        // TODO: update the code to test the property buybacksTenYearsMax
        expect(instance).to.have.property('buybacksTenYearsMax');
        // expect(instance.buybacksTenYearsMax).to.be(expectedValueLiteral);
      });

      it('should have the property buybacksTwentyYearsMin (base name: "buybacksTwentyYearsMin")', function() {
        // TODO: update the code to test the property buybacksTwentyYearsMin
        expect(instance).to.have.property('buybacksTwentyYearsMin');
        // expect(instance.buybacksTwentyYearsMin).to.be(expectedValueLiteral);
      });

      it('should have the property buybacksTwentyYearsMax (base name: "buybacksTwentyYearsMax")', function() {
        // TODO: update the code to test the property buybacksTwentyYearsMax
        expect(instance).to.have.property('buybacksTwentyYearsMax');
        // expect(instance.buybacksTwentyYearsMax).to.be(expectedValueLiteral);
      });

      it('should have the property potentialUpside (base name: "potentialUpside")', function() {
        // TODO: update the code to test the property potentialUpside
        expect(instance).to.have.property('potentialUpside');
        // expect(instance.potentialUpside).to.be(expectedValueLiteral);
      });

    });
  });

}));
